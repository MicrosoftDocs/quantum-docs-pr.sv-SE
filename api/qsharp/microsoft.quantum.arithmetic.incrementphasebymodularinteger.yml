### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.incrementphasebymodularinteger
name: IncrementPhaseByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  Utför en modulär ökning av ett qubit-register med en heltalskonstant.


  Låt oss `increment` ange $a $, genom `modulus` att $N $ och Integer som är `target` kodat i $y $.

  Åtgärden utför sedan följande omvandling: \begin{align} \ket{y} \mapsto \ket{(y + a) \operatorname{mod} N} \end{align} heltal kodas i litet endian-format i QFT.
remarks: >-
  Förutsätter `target` att har den högsta bit inställningen 0.

  Förutsätter också att målets värde är mindre än $N $.


  För krets diagrammet och förklaringen, se figur 5 på [sidan 5 i arXiv: Quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=5).
syntax: 'operation IncrementPhaseByModularInteger (increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
input:
  content: '(increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: increment
    summary: Heltals ökning $a $ som ska läggas till i $y $.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Integer $N $ som mods $y + a $.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Integer $y $ i fas-kodat litet endian-format `increment` som $a $ läggs till i.
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.incrementbymodularinteger
metadata:
  ms.openlocfilehash: e97f88d64d9188d18b10ed7f67adc0225167c466
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676859"
