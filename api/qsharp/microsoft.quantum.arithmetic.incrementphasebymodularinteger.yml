### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.incrementphasebymodularinteger
name: IncrementPhaseByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  Utför en modulär ökning av ett qubit-register med en heltalskonstant.


  Låt oss ange `increment` $a $, `modulus` genom att $N $ och Integer som är kodat i `target` $y $.

  Åtgärden utför sedan följande omvandling: \begin{align} \ket{y} \mapsto \ket{(y + a) \operatorname{mod} N} \end{align} heltal kodas i litet endian-format i QFT.
remarks: >-
  Förutsätter att `target` har den högsta bit inställningen 0.

  Förutsätter också att målets värde är mindre än $N $.


  För krets diagrammet och förklaringen, se figur 5 på [sidan 5 i arXiv: Quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=5).
syntax: 'operation IncrementPhaseByModularInteger (increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
input:
  content: '(increment : Int, modulus : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: increment
    summary: Heltals ökning $a $ som ska läggas till i $y $.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Integer $N $ som mods $y + a $.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Integer $y $ i fas-kodat litet endian-format som `increment` $a $ läggs till i.
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.incrementbymodularinteger
metadata:
  ms.openlocfilehash: 92c20afa6753d80a10a38d8c787efab3a295fc2b
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89342847"
