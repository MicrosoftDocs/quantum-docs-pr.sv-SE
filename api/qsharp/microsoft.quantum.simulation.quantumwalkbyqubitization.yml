### YamlMime:QSharpType
uid: microsoft.quantum.simulation.quantumwalkbyqubitization
name: QuantumWalkByQubitization
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Konverterar en `BlockEncodingReflection` till en Quantum-LED.


  Det innebär att det finns en `BlockEncodingReflection` enhetlig $U $ som kodar en viss operatör $H $ of Interest, konverterar den till en Quantum-och $W $ som innehåller spektrumet $ \pm e ^ {\pm i\sin ^{-1}(H)} $.
syntax: 'function QuantumWalkByQubitization (blockEncoding : Microsoft.Quantum.Simulation.BlockEncodingReflection) : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)'
references: >-
  - Hamiltonian Simulation by Qubitization
    Guang Hao Low, Isaac L. Chuang
    https://arxiv.org/abs/1610.06546
input:
  content: '(blockEncoding: Microsoft. Quantum. simulering. BlockEncodingReflection)'
  types:
  - name: BlockEncoding
    uid: microsoft.quantum.simulation.blockencodingreflection
output:
  content: ((Qubit [], qubit []) = > enhet är just + CTL)
  types:
  - summary: En Quantum-$W $ som agerar gemensamt på register `a` och `s` som blockerar-kodar $H $ och innehåller spektrumet $ \pm e ^ {\pm i\sin ^{-1}(H)} $.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
ms.openlocfilehash: aec6e81e44d4fa09e2ca131f0350590541f4dc8d
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: sv-SE
ms.lasthandoff: 10/30/2019
ms.locfileid: "73065358"
