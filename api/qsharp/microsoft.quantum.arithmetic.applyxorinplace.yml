### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.applyxorinplace
name: ApplyXorInPlace
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  Tillämpar en Bitvis-XOR-åtgärd mellan ett klassiskt heltal och ett heltal som representeras av ett register av qubits.


  Tillämpar `X` åtgärder på qubits i ett litet endian-register baserat på 1 bitar i ett heltal.


  Låt oss `value` ange ett och låt y vara ett osignerat heltal som är kodat `target`i och `InPlaceXorLE` utför sedan en åtgärd som anges av följande karta: $ \ket{y}\rightarrow \ket{y\oplus a} $, där $ \OPLUS $ är den bitvisa eller operatorn.
syntax: 'operation ApplyXorInPlace (value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: value
    summary: Ett heltal som antas vara icke-negativt.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Ett Quantum-register som används för att `value` lagra i lite endian-kodning.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 27568274d343242f3b3bd0eef8de6e48d546de1f
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82679915"
