### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.applyxorinplace
name: ApplyXorInPlace
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  Tillämpar en Bitvis-XOR-åtgärd mellan ett klassiskt heltal och ett heltal som representeras av ett register av qubits.


  Tillämpar `X` åtgärder på qubits i ett litet endian-register baserat på 1 bitar i ett heltal.


  Låt oss ange `value` av ett och låt y vara ett osignerat heltal som är kodat i `target`och `InPlaceXorLE` sedan utföra en åtgärd som anges av följande karta: $ \ket{y}\rightarrow \ket{y\oplus a} $, där $ \oplus $ är den bitvisa eller operatorn.
syntax: 'operation ApplyXorInPlace (value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: value
    summary: Ett heltal som antas vara icke-negativt.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Ett Quantum-register som används för att lagra `value` i lite-endian-kodning.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 9d3d837d92537cc5d51a80e8e1c83c230b7acc28
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76871183"
