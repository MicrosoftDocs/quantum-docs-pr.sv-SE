### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
name: MultiplyAndAddPhaseByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: Samma som MultiplyAndAddByModularInteger, men förutsätter att summand kodar heltal i QFT-basen.
remarks: >-
  Förutsätter att `phaseSummand` har den högsta bit inställningen 0.

  Förutsätter också att värdet för `phaseSummand` är mindre än $N $.
syntax: 'operation MultiplyAndAddPhaseByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, phaseSummand : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, phaseSummand : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: constMultiplier
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Modulus $N $ som addition och multiplikation tas med avseende på.
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: Ett Quantum-register som representerar ett osignerat heltal vars värde ska läggas till i varje bas tillstånds etikett för `summand` .
    uid: microsoft.quantum.arithmetic.littleendian
  - name: phaseSummand
    summary: Ett Quantum-register som representerar ett osignerat heltal som används som mål för den här åtgärden.
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
metadata:
  ms.openlocfilehash: c1a7fd9523ee9056215cfbd5f2c89134f250bf1c
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89353557"
