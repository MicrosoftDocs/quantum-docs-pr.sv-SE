### YamlMime:QSharpNamespace
functions:
- summary: Förutsätter att två matriser med booleska värden är lika.
  uid: Microsoft.Quantum.Diagnostics.AllEqualityFactB
- summary: Förutsätter att två matriser med heltals värden är lika.
  uid: Microsoft.Quantum.Diagnostics.AllEqualityFactI
- summary: Deklarerar att ett klassiskt villkor är falskt.
  uid: Microsoft.Quantum.Diagnostics.Contradiction
- summary: Dumpar den aktuella mål datorns status.
  uid: Microsoft.Quantum.Diagnostics.DumpMachine
- summary: Dumpar den aktuella mål datorns status som är associerad med den angivna qubits.
  uid: Microsoft.Quantum.Diagnostics.DumpRegister
- summary: Förutsätter att en klassisk bool-variabel har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactB
- summary: Förutsätter att ett komplext tal har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactC
- summary: Förutsätter att ett komplext tal har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactCP
- summary: Förutsätter att en klassisk int-variabel har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactI
- summary: Förutsätter att en klassisk BigInt-variabel har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactL
- summary: Förutsätter att en klassisk resultat variabel har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.EqualityFactR
- summary: Representerar anspråket att ett klassiskt flytt ALS värde har det förväntade värdet upp till en viss absolut tolerans.
  uid: Microsoft.Quantum.Diagnostics.EqualityWithinToleranceFact
- summary: Deklarerar att ett klassiskt villkor är sant.
  uid: Microsoft.Quantum.Diagnostics.Fact
- summary: Intern funktion som används för att rapportera fel i meningsfulla fel meddelanden.
  uid: Microsoft.Quantum.Diagnostics.FormattedFailure
- summary: Garanterar att ett klassiskt komplext tal har det förväntade värdet upp till en liten tolerans för 1e-10.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactC
- summary: Garanterar att ett klassiskt komplext tal har det förväntade värdet upp till en liten tolerans för 1e-10.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactCP
- summary: Garanterar att ett klassiskt flytt ALS värde har det förväntade värdet upp till en liten tolerans för 1e-10.
  uid: Microsoft.Quantum.Diagnostics.NearEqualityFactD
name: Microsoft.Quantum.Diagnostics
newtypes:
- summary: Compile-känt attribut som kan användas för att definiera ett alternativt namn som kan användas vid inläsning av en typ eller som kan anropas i test syfte.
  uid: Microsoft.Quantum.Diagnostics.EnableTestingViaName
- summary: Compile-känt attribut som används för att markera ett enhets test.
  uid: Microsoft.Quantum.Diagnostics.Test
operations:
- summary: Mellan ett anrop till den här åtgärden och dess intilliggande, förutsätter att en viss åtgärd anropas högst ett visst antal gånger.
  uid: Microsoft.Quantum.Diagnostics.AllowAtMostNCallsCA
- summary: Mellan ett anrop till den här åtgärden och dess intilliggande, försäkrar att högst ett angivet antal ytterligare qubits allokeras med hjälp av uttryck.
  uid: Microsoft.Quantum.Diagnostics.AllowAtMostNQubits
- summary: Assert att de aktuella qubits är i läget $ \ket {0} $.
  uid: Microsoft.Quantum.Diagnostics.AssertAllZero
- summary: Assert att de aktuella qubits är i $ \ket {0} $-tillstånd upp till en bestämd tolerans.
  uid: Microsoft.Quantum.Diagnostics.AssertAllZeroWithinTolerance
- summary: Förutsätter att mätningen av den aktuella qubits i den aktuella Pauli-basen alltid har det aktuella resultatet.
  uid: Microsoft.Quantum.Diagnostics.AssertMeasurement
- summary: Förutsätter att mätningen av den aktuella qubits i den aktuella Pauli-grunden har det resultat som har givit den sannolikheten, inom viss tolerans.
  uid: Microsoft.Quantum.Diagnostics.AssertMeasurementProbability
- summary: >-
    Två åtgärder förutsätter att de fungerar identiskt för alla ingångs tillstånd.

    Den här kontrollen implementeras genom att kontrol lera åtgärdens åtgärder på alla stater i formuläret $V _0 \otimes... \otimes V_ {n-1} $, där $V _k $ är ett av tillstånden $ \ket {0} $, $ \ket {1} $, $ \ket{+} $ och $ \ket{i} $ (+ 1 Eigenstate av Pauli Y-operatorn).

    Den här kontrollen använder $n $ qubits och kräver flera anrop av de åtgärder som jämförs.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualInPlace
- summary: Kontrollerar om åtgärden `givenU` är lika med åtgärden `expectedU` för den angivna indata-storleken genom att kontrol lera åtgärdens åtgärder endast på vektorerna från beräknings basen. Detta är ett nödvändigt, men inte tillräckligt, villkor för likheten av två unitaries.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualInPlaceCompBasis
- summary: >-
    Två åtgärder förutsätter att de fungerar identiskt för alla ingångs tillstånd.

    Den här kontrollen implementeras med hjälp av Choi – Jamiołkowski-isomorphism för att minska försäkran till en qubit-tillstånds kontroll på två Entangled-register. Den här åtgärden behöver därför bara ett enda anrop till varje åtgärd som testas, men kräver två gånger så många qubits som ska allokeras. Denna kontroll kan användas för att se till att en optimerad version av en åtgärd fungerar identiskt med dess naïve-implementering, eller att en åtgärd som agerar på ett intervall av icke-Quantum-indata accepterar kända fall.
  uid: Microsoft.Quantum.Diagnostics.AssertOperationsEqualReferenced
- summary: Förutsätter att fasen för ett Equal-positions läge har det förväntade värdet.
  uid: Microsoft.Quantum.Diagnostics.AssertPhase
- summary: Förutsätter att qubit `q` finns i den förväntade eigenstate för Pauli Z-operatorn.
  uid: Microsoft.Quantum.Diagnostics.AssertQubit
- summary: >-
    Förutsätter att en qubit förväntas i det förväntade läget.

    `expected` representerar en komplex Vector, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $. Det första elementet i tuppeln som representerar var och en av $a $, $b $ är den reella delen av det komplexa talet, medan det andra är den imaginära delen. Det sista argumentet definierar toleransen för vilken kontroll görs.
  uid: Microsoft.Quantum.Diagnostics.AssertQubitIsInStateWithinTolerance
- summary: Förutsätter att qubit `q` finns i den förväntade eigenstate för Pauli Z-operatorn upp till en specifik tolerans.
  uid: Microsoft.Quantum.Diagnostics.AssertQubitWithinTolerance
- summary: Med en åtgärd visas diagnostiken för den åtgärd som görs tillgängliga av det aktuella körnings målet.
  uid: Microsoft.Quantum.Diagnostics.DumpOperation
- summary: Använder DumpRegister för att ge diagnostik för status för en referens-och mål registrering. Skriven som separat åtgärd för att tillåta åsidosättning och tolkning som separata register, i stället för en enda kombinerad registrering.
  uid: Microsoft.Quantum.Diagnostics.DumpReferenceAndTarget
- summary: Kontrollerar om resultatet av att tillämpa två åtgärder `givenU` och `expectedU` till gång till ett delstats tillstånd är detsamma. Bas status beskrivs av `basis` parameter. Se <xref:microsoft.quantum.extensions.fliptobasis> funktion för mer information om den här beskrivningen.
  uid: Microsoft.Quantum.Diagnostics._assertEqualOnBasisVector
- summary: >-
    Tillämpar unitaries som mappar $ \ket {0} \otimes\cdots\ket {0} $ till $ \ket{\ psi_0} \otimes \ket{\ psi_ {n-1}} $, där $ \ket{\ psi_k} $ är beroende av `basis[k]` .

    Korrespondensen mellan värdet `basis[k]` och $ \ket{\ psi_k} $ är följande:

    - `basis[k]=0` $ \rightarrow \ket {0} $. - `basis[k]=1` $ \rightarrow \ket {1} $. - `basis[k]=2` $ \rightarrow \ket{+} $. - `basis[k]=3` $ \rightarrow \ket{i} $ (+ 1 eigenstate of Pauli Y).
  uid: Microsoft.Quantum.Diagnostics._flipToBasis
- summary: Itererar en variabel genom en kartesiska-produkt [0, gränser [0]-1] × [0, gränser [1]-1] × [0, gränser [längd (gränser)-1]-1] och anrop OP (arr) för varje element i kartesiska-produkten
  uid: Microsoft.Quantum.Diagnostics._iterateThroughCartesianPower
- summary: >-
    Med två register, förbereder maximally Entangled-statusen mellan varje par av qubits i respektive register. Alla qubits måste starta i ⟩-läget | 0.

    Resultatet är att motsvarande par qubits från varje register finns i $ \bra{\ beta_ {00} } \ket{\ beta_ {00} } $.
  uid: Microsoft.Quantum.Diagnostics._prepareEntangledState
summary: ''
uid: Microsoft.Quantum.Diagnostics
metadata:
  ms.openlocfilehash: d39cd1cac6121bd411fc0c87024254599bbb0641
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92727444"
