### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  Utför modulär multiplikation med en heltalskonstant i ett qubit-register.


  Låt oss ange `modulus` $N $ och `constMultiplier` $a $.

  Den här åtgärden implementerar sedan en enhetlig åtgärd som definieras av följande karta i beräknings basen: $ $ \begin{align} \ket{y} \mapsto \ket{(a \cdot y) \operatorname{mod} N} \end{align} $ $ för alla $y $ mellan $0 $ och $N-$1.
remarks: >-
  - För krets diagrammet och förklaring, se figur 7 på [sidan 8 av arXiv: Quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8)

  - Den här åtgärden motsvarar U ₐ i [arXiv: Quant-pH/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf)
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: Konstant enligt vilken multiplikatorn multipliceras. Måste vara co-primtal till Modulus.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Multiplikations åtgärden utförs med modulo `modulus` .
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      Talet multipliceras med en konstant.

      Detta är en matris med qubits som kodar ett heltal i format med liten endian.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 6aeba91c20667fd82833e6c6239c2269296a6850
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91476751"
