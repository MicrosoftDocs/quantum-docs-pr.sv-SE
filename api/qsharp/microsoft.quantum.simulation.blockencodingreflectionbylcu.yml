### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
name: BlockEncodingReflectionByLCU
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  Kodar en operatör av intresse i en `BlockEncodingReflection`.


  Detta skapar en $U `BlockEncodingReflection`-V\cdot = P\cdot P ^ \dagger $ som kodar vissa operatorer $H = \sum_{j} | \alpha_j | U_j $ av intresse som är en linjär kombination av unitaries. $P $ är vanligt vis en enhetlig tillstånds förberedelse som $P \ket{0}\_a\sum_j\sqrt {\ alpha_j/\|\vec\alpha\|\_2} \ket{j}\_en $, och $V = \sum_{j}\ket{j}\bra{j}\_a\otimes U_ j $.
remarks: Den här `BlockEncoding` implementeringen ger den egenskaperna för en `BlockEncodingReflection`.
syntax: 'function BlockEncodingReflectionByLCU (statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl)) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
input:
  content: '(statePreparation : (Qubit[] => Unit is Adj + Ctl), selector : ((Qubit[], Qubit[]) => Unit is Adj + Ctl))'
  types:
  - name: statePreparation
    summary: En enhetlig $P $ som förbereder ett visst mål tillstånd.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: selector
    summary: En enhetlig $V $ som kodar komponenten unitaries i $H $.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: En enhetlig $U $ som agerar gemensamt på register `a` och `s` som blockerar-kodar $H $ och uppfyller $U ^{-1} = U $.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: a092068a61d860074ace150b0c7872eb064a63b9
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73219169"
