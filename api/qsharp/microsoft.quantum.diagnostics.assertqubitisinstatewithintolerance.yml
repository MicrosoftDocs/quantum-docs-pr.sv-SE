### YamlMime:QSharpType
uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
name: AssertQubitIsInStateWithinTolerance
type: operation
namespace: Microsoft.Quantum.Diagnostics
summary: >-
  Förutsätter att en qubit förväntas i det förväntade läget.


  `expected`representerar en komplex Vector, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $.

  Det första elementet i tuppeln som representerar var och en av $a $, $b $ är den reella delen av det komplexa talet, medan det andra är den imaginära delen.

  Det sista argumentet definierar toleransen för vilken kontroll görs.
remarks: >-
  Följande Mathematica-kod kan användas för att verifiera uttryck för mi, MX, My, MZ:


  ```mathematica

  {Id, X, Y, Z} = Table[PauliMatrix[k], {k, 0, 3}];

  st = {{ reA + I imA }, { reB + I imB} };

  M = st . ConjugateTranspose[st];

  mx = Tr[M.X] // ComplexExpand;

  my = Tr[M.Y] // ComplexExpand;

  mz = Tr[M.Z] // ComplexExpand;

  mi = Tr[M.Id] // ComplexExpand;

  2 m == Id mi + X mx + Z mz + Y my // ComplexExpand // Simplify

  ```


  Toleransen\_är $L {\infty} $-avståndet mellan 3 dimensionella verkliga vektorer (x ₂, x-₃, x-₄) som definieras av $\_\langle\psi | \Psi\rangle =\_x 1 I +\_x 2 x +\_x 3 Y + x 4 Z $ och verklig Vector (y ₂, y ₃, y ₄) definieras av ρ = Y ₁ I + y ₂ x + y ₃ Y + y ₄ Z där ρ är densiteten som motsvarar status för registret.

  Detta gäller endast under antagandet att TR (ρ) och tr (| ψ ⟩ ⟨ ψ |) är båda 1 (t. ex. x ₁ = 1/2, y ₁ = 1/2).

  Om detta inte är fallet, förutsätter funktionen att l ∞ avståndet mellan (x ₂-x ₁, x ₃-x ₁, x ₄-x ₁, x ₄ + x ₁) och (y ₂-y ₁, y ₃-y ₁, y ₄-y ₁, y ₄ + y ₁) är mindre än tolerans parametern.
examples: >-
  ```Q#

  using (qubits = Qubit[2]) {
      // Both qubits are initialized as |0〉: a=(1 + 0*i), b=(0 + 0*i)
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[0], 1e-5);
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[1], 1e-5);
      Y(qubits[1]);
      // Y |0〉 = i |1〉: a=(0 + 0*i), b=(0 + 1*i)
      AssertQubitIsInStateWithinTolerance((Complex(0., 0.), Complex(0., 1.)), qubits[1], 1e-5);
  }

  ```
syntax: 'operation AssertQubitIsInStateWithinTolerance (expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double) : Unit'
input:
  content: '(expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double)'
  types:
  - name: expected
    summary: Förväntade komplexa amplituder för $ \ket{0}$ respektive $ \ket{1}$.
    types:
    - uid: microsoft.quantum.math.complex
    - uid: microsoft.quantum.math.complex
  - name: register
    summary: Qubit vars tillstånd ska försäkras. Observera att denna qubit antas vara en avgränsad från andra allokerade qubits och inte Entangled.
    isPrimitive: true
    uid: Qubit
  - name: tolerance
    summary: >-
      Den avvikande toleransen enligt vilken faktiska amplituder får avvika från förväntat värde.

      Se anmärkningar nedan för mer information.
    isPrimitive: true
    uid: Double
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
metadata:
  ms.openlocfilehash: 77d28c122a44f39924242dedb6bd6163974e18c1
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82656606"
