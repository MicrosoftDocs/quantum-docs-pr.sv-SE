### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: microsoft.quantum.arithmetic
summary: Multiplicera Heltal `xs` med heltal `ys` och lagra resultatet i `result` , som först måste vara noll.
remarks: >-
  Använder en vanlig Shift-och-Lägg-metod för att implementera multiplikationen.

  Den kontrollerade versionen har förbättrats genom att du kopierade $x _i $ till en Ancilla-qubit som är villkorlig på kontrollen qubits och sedan styr additionen av Ancilla qubit.
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $-bit multiplicand (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $-bit multiplikator (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $2N $-bit result (LittleEndian) måste ha statusen $ \ket {0} $ initialt.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 67e1ef577bf36cf524d2468bc191d2b381c800df
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: sv-SE
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89353387"
