### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: Multiplicera Heltal `xs` med Integer `ys` och lagra resultatet i `result`, vilket måste vara noll först.
remarks: >-
  Använder en vanlig Shift-och-Lägg-metod för att implementera multiplikationen.

  Den kontrollerade versionen har förbättrats genom att du kopierade $x _i $ till ett Ancilla qubit-villkor på kontrollen qubits och sedan styr additionen på Ancilla qubit.
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $-bit multiplicand (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $-bit multiplikator (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $2N $-bit result (LittleEndian) måste vara i tillstånd $ \ket{0}$ initialt.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: 5af23390ef67bf339e816e4e8af1d3f52847aaa7
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: sv-SE
ms.lasthandoff: 10/31/2019
ms.locfileid: "73218744"
